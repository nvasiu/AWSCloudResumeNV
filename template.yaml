AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-cloud-resume

  Sample SAM Template for aws-cloud-resume

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:

  MyWebsite:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: cloud-resume-nv

  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: Z07961341JUTHSY1T7YU7 # From Route 53 hosted zone
      RecordSets: # This is a list, don't forget the dash
        - Name: nicvasiu.ca # From Route 53 hosted zone
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # This is always the hosted zone ID when routing traffic to a CloudFront distribution
            DNSName: !GetAtt MyDistribution.DomainName

  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: nicvasiu.ca # From Route 53 hosted zone
      ValidationMethod: DNS

  MyDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: !Ref MyCertificate
          SslSupportMethod: sni-only
        Aliases:
          - nicvasiu.ca # From Route 53 hosted zone
        DefaultCacheBehavior:
          ViewerProtocolPolicy: allow-all
          TargetOriginId: cloud-resume-nv.s3-website-us-east-1.amazonaws.com # Referencing the origin below
          DefaultTTL: 0 # Set to 0 to stop Cloudfront from caching, so it always shows the same content as going directly to S3
          MinTTL: 0
          MaxTTL: 0
          ForwardedValues:
            QueryString: false
        Origins:
          - DomainName: cloud-resume-nv.s3-website-us-east-1.amazonaws.com # The dash creates an array in yaml (Origins needs to be an array)
            Id: cloud-resume-nv.s3-website-us-east-1.amazonaws.com
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
        Enabled: "true"
        DefaultRootObject: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: "*"
          Action: "s3:GetObject"
          Resource: !Join
            - ""
            - - "arn:aws:s3:::"
              - !Ref MyWebsite
              - /*
      Bucket: !Ref MyWebsite

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloud-resume-nv
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"

  GetCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
            - DynamoDBCrudPolicy:
                TableName: cloud-resume-nv
      CodeUri: getcount/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /getcount
            Method: get

  PutCountFunction:
      Type: AWS::Serverless::Function
      Properties:
        Policies:
          - DynamoDBCrudPolicy:
              TableName: cloud-resume-nv
        CodeUri: putcount/
        Handler: app.lambda_handler
        Runtime: python3.12
        Architectures:
          - x86_64
        Events:
          HelloWorld:
            Type: Api
            Properties:
              Path: /putcount
              Method: get

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetCountFunctionAPI:
    Description: "API Gateway endpoint URL for Prod stage for Get Count function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  GetCountFunction:
    Description: "Get Count Lambda Function ARN"
    Value: !GetAtt GetCountFunction.Arn
  GetCountFunctionIamRole:
    Description: "Implicit IAM Role created for Get Count function"
    Value: !GetAtt GetCountFunction.Arn
  PutCountFunctionAPI:
    Description: "API Gateway endpoint URL for Prod stage for Put Count function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  PutCountFunction:
    Description: "Put Count Lambda Function ARN"
    Value: !GetAtt PutCountFunction.Arn
  PutCountFunctionIamRole:
    Description: "Implicit IAM Role created for Put Count function"
    Value: !GetAtt PutCountFunction.Arn
